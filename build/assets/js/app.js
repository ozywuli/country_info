(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var app = require('./react.js');

app();


},{"./react.js":2}],2:[function(require,module,exports){
'use strict';

(function () {

  module.exports = function () {

    /*
     * Panels
     */
    var Panels = React.createClass({
      displayName: 'Panels',

      getInitialState: function getInitialState() {
        return {
          countries: []
        };
      },

      componentDidMount: function componentDidMount() {
        $.ajax({
          url: 'https://restcountries-v1.p.mashape.com/all',
          type: 'GET',
          data: {},
          datatype: 'json',
          success: (function (countries) {

            var countries = countries;

            if (this.isMounted()) {
              this.setState({
                countries: countries
              });
            }
          }).bind(this), // end success
          error: (function (err) {
            console.log(err);
          }).bind(this), // end error
          beforeSend: function beforeSend(xhr) {
            xhr.setRequestHeader("X-Mashape-Authorization", "J10aBMA4cAmshoCjGohz6QX42UMlp1du2X9jsnZRUQa0QLICnc");
          } // end beforeSend

        }).done(function () {
          $('.preloader').fadeOut(1000);
          $('.instructions').fadeIn();
        }); // end ajax
      },

      render: function render() {
        return React.createElement(
          'div',
          { className: 'panels' },
          React.createElement(
            'ul',
            { className: 'panels__container' },
            this.state.countries.map(function (country) {
              // console.log(country);
              return React.createElement(
                'li',
                { className: 'panels__item', itemID: country.name.toLowerCase().replace(/ /g, '') },
                React.createElement(
                  'h2',
                  null,
                  country.name
                ),
                React.createElement(
                  'ul',
                  null,
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Capital'
                    ),
                    React.createElement(
                      'span',
                      null,
                      country.capital
                    )
                  ),
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Alternative Spellings'
                    ),
                    country.altSpellings
                  ),
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Relevance'
                    ),
                    country.relevance
                  ),
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Region'
                    ),
                    country.region
                  ),
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Subregion'
                    ),
                    country.subregion
                  ),
                  React.createElement(
                    'li',
                    { className: 'panels__object--noc' },
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Translations'
                    ),
                    Object.keys(country.translations).map(function (key) {
                      return React.createElement(
                        'div',
                        null,
                        key,
                        ': ',
                        country.translations[key]
                      );
                    })
                  ),
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Population'
                    ),
                    country.population
                  ),
                  React.createElement(
                    'li',
                    { className: 'panels__object--noc' },
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Latitude, Longitude'
                    ),
                    '[',
                    country.latlng[0],
                    ', ',
                    country.latlng[1],
                    ']'
                  ),
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Demonym'
                    ),
                    country.demonym
                  ),
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Area'
                    ),
                    country.area
                  ),
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Gini'
                    ),
                    country.gini
                  ),
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Timezones'
                    ),
                    country.timezones
                  ),
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Borders'
                    ),
                    country.borders
                  ),
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Native Name'
                    ),
                    country.nativeName
                  ),
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Calling Codes'
                    ),
                    country.callingCodes
                  ),
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Top Level Domain'
                    ),
                    country.topLevelDomain
                  ),
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Currencies'
                    ),
                    country.currencies
                  ),
                  React.createElement(
                    'li',
                    null,
                    React.createElement(
                      'span',
                      { className: 'panels__property' },
                      'Languages'
                    ),
                    country.languages
                  )
                )
              );
            })
          )
        );
      }

    });

    /*
     * Map
     */
    L.mapbox.accessToken = 'pk.eyJ1IjoiYW9zaWthIiwiYSI6IjQzRGIxeEkifQ.7OvmyBbXwwt9Qxjlh9Qd3w';

    var Map = React.createClass({
      displayName: 'Map',

      getInitialState: function getInitialState() {
        return {
          layers: ''
        };
      },

      createMap: function createMap(element) {
        var map = L.mapbox.map(element, 'mapbox.streets', { zoomControl: false });
        return map;
      },

      setupMap: function setupMap() {
        this.map.setView([this.props.lat, this.props.lon], this.props.zoom);
      },

      createLayers: function createLayers() {

        var myLayer = L.mapbox.featureLayer().addTo(this.map);
        new L.Control.Zoom({ position: 'topright' }).addTo(this.map);

        $.getJSON('assets/data/countries.geo.json', function (data) {
          myLayer.setGeoJSON(data);

          myLayer.eachLayer(function (layer) {
            layer.on('click', function (e) {

              var id = $(this)[0].feature.properties.name.toLowerCase().replace(/ /g, '').slice(0, 12);
              console.log($('[itemid*=' + id + ']'));

              $('.instructions').fadeOut();

              $('.panels__item').css('display', 'none');
              $('[itemid*=' + id + ']').css('display', 'block');
            });
          });
        });
      },

      componentDidMount: function componentDidMount() {
        if (this.props.createMap) {
          this.map = this.props.createMap(this.getDOMNode());
        } else {
          this.map = this.createMap(this.getDOMNode());
        }

        this.setupMap();
        this.createLayers();
      },

      onMapClick: function onMapClick() {},

      render: function render() {
        return React.createElement('div', { className: 'map' });
      }

    });

    var Container = React.createClass({
      displayName: 'Container',

      render: function render() {
        return React.createElement(
          'div',
          { className: 'container' },
          React.createElement(Map, { lat: '0', lon: '0', zoom: '3' }),
          React.createElement(Panels, null)
        );
      }
    });

    React.render(React.createElement(Container, null), document.getElementById('mount'));
  };
})();


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJDOlxcd2FtcFxcd3d3XFxsYWJcXGNvdW50cnlfaW5mb1xcc3JjXFxhc3NldHNcXGpzXFxhcHAuanMiLCJDOlxcd2FtcFxcd3d3XFxsYWJcXGNvdW50cnlfaW5mb1xcc3JjXFxhc3NldHNcXGpzXFxyZWFjdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLFlBQVksQ0FBQzs7QUFFYixJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7O0FBRWhDLEdBQUcsRUFBRSxDQUFDO0FBQ047OztBQ0xBLFlBQVksQ0FBQzs7QUFFYixDQUFDLFlBQVk7O0FBRWIsRUFBRSxNQUFNLENBQUMsT0FBTyxHQUFHLFlBQVk7QUFDL0I7QUFDQTtBQUNBOztJQUVJLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDbkMsTUFBTSxXQUFXLEVBQUUsUUFBUTs7TUFFckIsZUFBZSxFQUFFLFNBQVMsZUFBZSxHQUFHO1FBQzFDLE9BQU87VUFDTCxTQUFTLEVBQUUsRUFBRTtTQUNkLENBQUM7QUFDVixPQUFPOztNQUVELGlCQUFpQixFQUFFLFNBQVMsaUJBQWlCLEdBQUc7UUFDOUMsQ0FBQyxDQUFDLElBQUksQ0FBQztVQUNMLEdBQUcsRUFBRSw0Q0FBNEM7VUFDakQsSUFBSSxFQUFFLEtBQUs7VUFDWCxJQUFJLEVBQUUsRUFBRTtVQUNSLFFBQVEsRUFBRSxNQUFNO0FBQzFCLFVBQVUsT0FBTyxFQUFFLENBQUMsVUFBVSxTQUFTLEVBQUU7O0FBRXpDLFlBQVksSUFBSSxTQUFTLEdBQUcsU0FBUyxDQUFDOztZQUUxQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtjQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUNaLFNBQVMsRUFBRSxTQUFTO2VBQ3JCLENBQUMsQ0FBQzthQUNKO1dBQ0YsRUFBRSxJ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QixPQUFPLEtBQUssQ0FBQyxhQUFhO1VBQ3hCLEtBQUs7VUFDTCxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUU7VUFDMUIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDO1VBQzNELEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQztTQUNsQyxDQUFDO09BQ0g7QUFDUCxLQUFLLENBQUMsQ0FBQzs7SUFFSCxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztHQUN0RixDQUFDO0NBQ0gsR0FBRyxDQUFDO0FBQ0wiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXBwID0gcmVxdWlyZSgnLi9yZWFjdC5qcycpO1xuXG5hcHAoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa002TDNkaGJYQXZkM2QzTDJ4aFlpOWpiM1Z1ZEhKNVgybHVabTh2YzNKakwyRnpjMlYwY3k5cWN5OWhjSEF1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRU3hKUVVGSkxFZEJRVWNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN08wRkJSV2hETEVkQlFVY3NSVUZCUlN4RFFVRkRJaXdpWm1sc1pTSTZJa002TDNkaGJYQXZkM2QzTDJ4aFlpOWpiM1Z1ZEhKNVgybHVabTh2YzNKakwyRnpjMlYwY3k5cWN5OWhjSEF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SjJZWElnWVhCd0lEMGdjbVZ4ZFdseVpTZ25MaTl5WldGamRDNXFjeWNwTzF4eVhHNWNjbHh1WVhCd0tDazdYSEpjYmlKZGZRPT0iLCIndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAvKlxyXG4gICAgICogUGFuZWxzXHJcbiAgICAgKi9cbiAgICB2YXIgUGFuZWxzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgICAgZGlzcGxheU5hbWU6ICdQYW5lbHMnLFxuXG4gICAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb3VudHJpZXM6IFtdXG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9yZXN0Y291bnRyaWVzLXYxLnAubWFzaGFwZS5jb20vYWxsJyxcbiAgICAgICAgICB0eXBlOiAnR0VUJyxcbiAgICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgICBkYXRhdHlwZTogJ2pzb24nLFxuICAgICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbiAoY291bnRyaWVzKSB7XG5cbiAgICAgICAgICAgIHZhciBjb3VudHJpZXMgPSBjb3VudHJpZXM7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmlzTW91bnRlZCgpKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGNvdW50cmllczogY291bnRyaWVzXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLmJpbmQodGhpcyksIC8vIGVuZCBzdWNjZXNzXG4gICAgICAgICAgZXJyb3I6IChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgIH0pLmJpbmQodGhpcyksIC8vIGVuZCBlcnJvclxuICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uIGJlZm9yZVNlbmQoeGhyKSB7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIlgtTWFzaGFwZS1BdXRob3JpemF0aW9uXCIsIFwiSjEwYUJNQTRjQW1zaG9DakdvaHo2UVg0MlVNbHAxZHUyWDlqc25aUlVRYTBRTElDbmNcIik7XG4gICAgICAgICAgfSAvLyBlbmQgYmVmb3JlU2VuZFxuXG4gICAgICAgIH0pLmRvbmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICQoJy5wcmVsb2FkZXInKS5mYWRlT3V0KDEwMDApO1xuICAgICAgICAgICQoJy5pbnN0cnVjdGlvbnMnKS5mYWRlSW4oKTtcbiAgICAgICAgfSk7IC8vIGVuZCBhamF4XG4gICAgICB9LFxuXG4gICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbHMnIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICd1bCcsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3BhbmVsc19fY29udGFpbmVyJyB9LFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5jb3VudHJpZXMubWFwKGZ1bmN0aW9uIChjb3VudHJ5KSB7XG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGNvdW50cnkpO1xuICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncGFuZWxzX19pdGVtJywgaXRlbUlEOiBjb3VudHJ5Lm5hbWUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gL2csICcnKSB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAnaDInLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIGNvdW50cnkubmFtZVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICd1bCcsXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbHNfX3Byb3BlcnR5JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICdDYXBpdGFsJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgIGNvdW50cnkuY2FwaXRhbFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbHNfX3Byb3BlcnR5JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICdBbHRlcm5hdGl2ZSBTcGVsbGluZ3MnXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnkuYWx0U3BlbGxpbmdzXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbHNfX3Byb3BlcnR5JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICdSZWxldmFuY2UnXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnkucmVsZXZhbmNlXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbHNfX3Byb3BlcnR5JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICdSZWdpb24nXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnkucmVnaW9uXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbHNfX3Byb3BlcnR5JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICdTdWJyZWdpb24nXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnkuc3VicmVnaW9uXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbHNfX29iamVjdC0tbm9jJyB9LFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3BhbmVsc19fcHJvcGVydHknIH0sXG4gICAgICAgICAgICAgICAgICAgICAgJ1RyYW5zbGF0aW9ucydcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoY291bnRyeS50cmFuc2xhdGlvbnMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAnOiAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeS50cmFuc2xhdGlvbnNba2V5XVxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbHNfX3Byb3BlcnR5JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICdQb3B1bGF0aW9uJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBjb3VudHJ5LnBvcHVsYXRpb25cbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3BhbmVsc19fb2JqZWN0LS1ub2MnIH0sXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncGFuZWxzX19wcm9wZXJ0eScgfSxcbiAgICAgICAgICAgICAgICAgICAgICAnTGF0aXR1ZGUsIExvbmdpdHVkZSdcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgJ1snLFxuICAgICAgICAgICAgICAgICAgICBjb3VudHJ5LmxhdGxuZ1swXSxcbiAgICAgICAgICAgICAgICAgICAgJywgJyxcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeS5sYXRsbmdbMV0sXG4gICAgICAgICAgICAgICAgICAgICddJ1xuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncGFuZWxzX19wcm9wZXJ0eScgfSxcbiAgICAgICAgICAgICAgICAgICAgICAnRGVtb255bSdcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeS5kZW1vbnltXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbHNfX3Byb3BlcnR5JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICdBcmVhJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBjb3VudHJ5LmFyZWFcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3BhbmVsc19fcHJvcGVydHknIH0sXG4gICAgICAgICAgICAgICAgICAgICAgJ0dpbmknXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnkuZ2luaVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncGFuZWxzX19wcm9wZXJ0eScgfSxcbiAgICAgICAgICAgICAgICAgICAgICAnVGltZXpvbmVzJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBjb3VudHJ5LnRpbWV6b25lc1xuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncGFuZWxzX19wcm9wZXJ0eScgfSxcbiAgICAgICAgICAgICAgICAgICAgICAnQm9yZGVycydcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeS5ib3JkZXJzXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbHNfX3Byb3BlcnR5JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICdOYXRpdmUgTmFtZSdcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeS5uYXRpdmVOYW1lXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbHNfX3Byb3BlcnR5JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICdDYWxsaW5nIENvZGVzJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBjb3VudHJ5LmNhbGxpbmdDb2Rlc1xuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncGFuZWxzX19wcm9wZXJ0eScgfSxcbiAgICAgICAgICAgICAgICAgICAgICAnVG9wIExldmVsIERvbWFpbidcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeS50b3BMZXZlbERvbWFpblxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncGFuZWxzX19wcm9wZXJ0eScgfSxcbiAgICAgICAgICAgICAgICAgICAgICAnQ3VycmVuY2llcydcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeS5jdXJyZW5jaWVzXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbHNfX3Byb3BlcnR5JyB9LFxuICAgICAgICAgICAgICAgICAgICAgICdMYW5ndWFnZXMnXG4gICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnkubGFuZ3VhZ2VzXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICB9KTtcblxuICAgIC8qXHJcbiAgICAgKiBNYXBcclxuICAgICAqL1xuICAgIEwubWFwYm94LmFjY2Vzc1Rva2VuID0gJ3BrLmV5SjFJam9pWVc5emFXdGhJaXdpWVNJNklqUXpSR0l4ZUVraWZRLjdPdm15QmJYd3d0OVF4amxoOVFkM3cnO1xuXG4gICAgdmFyIE1hcCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICAgIGRpc3BsYXlOYW1lOiAnTWFwJyxcblxuICAgICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGF5ZXJzOiAnJ1xuICAgICAgICB9O1xuICAgICAgfSxcblxuICAgICAgY3JlYXRlTWFwOiBmdW5jdGlvbiBjcmVhdGVNYXAoZWxlbWVudCkge1xuICAgICAgICB2YXIgbWFwID0gTC5tYXBib3gubWFwKGVsZW1lbnQsICdtYXBib3guc3RyZWV0cycsIHsgem9vbUNvbnRyb2w6IGZhbHNlIH0pO1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgfSxcblxuICAgICAgc2V0dXBNYXA6IGZ1bmN0aW9uIHNldHVwTWFwKCkge1xuICAgICAgICB0aGlzLm1hcC5zZXRWaWV3KFt0aGlzLnByb3BzLmxhdCwgdGhpcy5wcm9wcy5sb25dLCB0aGlzLnByb3BzLnpvb20pO1xuICAgICAgfSxcblxuICAgICAgY3JlYXRlTGF5ZXJzOiBmdW5jdGlvbiBjcmVhdGVMYXllcnMoKSB7XG5cbiAgICAgICAgdmFyIG15TGF5ZXIgPSBMLm1hcGJveC5mZWF0dXJlTGF5ZXIoKS5hZGRUbyh0aGlzLm1hcCk7XG4gICAgICAgIG5ldyBMLkNvbnRyb2wuWm9vbSh7IHBvc2l0aW9uOiAndG9wcmlnaHQnIH0pLmFkZFRvKHRoaXMubWFwKTtcblxuICAgICAgICAkLmdldEpTT04oJ2Fzc2V0cy9kYXRhL2NvdW50cmllcy5nZW8uanNvbicsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgbXlMYXllci5zZXRHZW9KU09OKGRhdGEpO1xuXG4gICAgICAgICAgbXlMYXllci5lYWNoTGF5ZXIoZnVuY3Rpb24gKGxheWVyKSB7XG4gICAgICAgICAgICBsYXllci5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICAgIHZhciBpZCA9ICQodGhpcylbMF0uZmVhdHVyZS5wcm9wZXJ0aWVzLm5hbWUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gL2csICcnKS5zbGljZSgwLCAxMik7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCQoJ1tpdGVtaWQqPScgKyBpZCArICddJykpO1xuXG4gICAgICAgICAgICAgICQoJy5pbnN0cnVjdGlvbnMnKS5mYWRlT3V0KCk7XG5cbiAgICAgICAgICAgICAgJCgnLnBhbmVsc19faXRlbScpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgICAgICAgICQoJ1tpdGVtaWQqPScgKyBpZCArICddJykuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmNyZWF0ZU1hcCkge1xuICAgICAgICAgIHRoaXMubWFwID0gdGhpcy5wcm9wcy5jcmVhdGVNYXAodGhpcy5nZXRET01Ob2RlKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubWFwID0gdGhpcy5jcmVhdGVNYXAodGhpcy5nZXRET01Ob2RlKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXR1cE1hcCgpO1xuICAgICAgICB0aGlzLmNyZWF0ZUxheWVycygpO1xuICAgICAgfSxcblxuICAgICAgb25NYXBDbGljazogZnVuY3Rpb24gb25NYXBDbGljaygpIHt9LFxuXG4gICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnbWFwJyB9KTtcbiAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgdmFyIENvbnRhaW5lciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICAgIGRpc3BsYXlOYW1lOiAnQ29udGFpbmVyJyxcblxuICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY29udGFpbmVyJyB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWFwLCB7IGxhdDogJzAnLCBsb246ICcwJywgem9vbTogJzMnIH0pLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFuZWxzLCBudWxsKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgUmVhY3QucmVuZGVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGFpbmVyLCBudWxsKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdW50JykpO1xuICB9O1xufSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa002TDNkaGJYQXZkM2QzTDJ4aFlpOWpiM1Z1ZEhKNVgybHVabTh2YzNKakwyRnpjMlYwY3k5cWN5OXlaV0ZqZEM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCTEVOQlFVTXNXVUZCVnpzN1FVRkZXaXhSUVVGTkxFTkJRVU1zVDBGQlR5eEhRVUZITEZsQlFWYzdPenM3TzBGQlN6VkNMRkZCUVVrc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF5eFhRVUZYTEVOQlFVTTdPenRCUVVVM1FpeHhRa0ZCWlN4RlFVRkZMREpDUVVGWE8wRkJRekZDTEdWQlFVODdRVUZEVEN4dFFrRkJVeXhGUVVGRkxFVkJRVVU3VTBGRFpDeERRVUZCTzA5QlEwWTdPMEZCUjBRc2RVSkJRV2xDTEVWQlFVVXNOa0pCUVZjN1FVRkROVUlzVTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXp0QlFVTk1MR0ZCUVVjc1JVRkJSU3cwUTBGQk5FTTdRVUZEYWtRc1kwRkJTU3hGUVVGRkxFdEJRVXM3UVVGRFdDeGpRVUZKTEVWQlFVVXNSVUZCUlR0QlFVTlNMR3RDUVVGUkxFVkJRVVVzVFVGQlRUdEJRVU5vUWl4cFFrRkJUeXhGUVVGRkxFTkJRVUVzVlVGQlV5eFRRVUZUTEVWQlFVVTdPMEZCUlROQ0xHZENRVUZKTEZOQlFWTXNSMEZCUnl4VFFVRlRMRU5CUVVNN08wRkJSVEZDTEdkQ1FVRkpMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzUlVGQlJUdEJRVU53UWl4clFrRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF6dEJRVU5hTEhsQ1FVRlRMRVZCUVVVc1UwRkJVenRsUVVOeVFpeERRVUZETEVOQlFVRTdZVUZEU0R0WFFVVkdMRU5CUVVFc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzBGQlExb3NaVUZCU3l4RlFVRkZMRU5CUVVFc1ZVRkJVeXhIUVVGSExFVkJRVVU3UVVGRGJrSXNiVUpCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdWMEZEYkVJc1EwRkJRU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdRVUZEV2l4dlFrRkJWU3hGUVVGRkxHOUNRVUZUTEVkQlFVY3NSVUZCUlR0QlFVTjRRaXhsUVVGSExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2VVSkJRWGxDTEVWQlFVVXNiMFJCUVc5RUxFTkJRVU1zUTBGQlF6dFhRVU4yUnpzN1UwRkZSaXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWYzdRVUZEYWtJc1YwRkJReXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVNNVFpeFhRVUZETEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU03VTBGRE4wSXNRMEZCUXl4RFFVRkRPMDlCUTBvN08wRkJSMFFzV1VGQlRTeEZRVUZGTEd0Q1FVRlhPMEZCUTJwQ0xHVkJRMFU3TzFsQlFVc3NVMEZCVXl4RlFVRkRMRkZCUVZFN1ZVRkRja0k3TzJOQlFVa3NVMEZCVXl4RlFVRkRMRzFDUVVGdFFqdFpRVVV2UWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVXl4UFFVRlBMRVZCUVVVN08wRkJSWHBETEhGQ1FVTkZPenRyUWtGQlNTeFRRVUZUTEVWQlFVTXNZMEZCWXl4RlFVRkRMRTFCUVUwc1JVRkJSU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzUlVGQlJTeERRVUZETEVGQlFVTTdaMEpCUTJoR096czdhMEpCUVVzc1QwRkJUeXhEUVVGRExFbEJRVWs3YVVKQlFVMDdaMEpCUTNaQ096czdhMEpCUTBVN096dHZRa0ZEUlRzN2QwSkJRVTBzVTBGQlV5eEZRVUZETEd0Q1FVRnJRanM3Y1VKQlFXVTdiMEpCUTJwRU96czdjMEpCUVU4c1QwRkJUeXhEUVVGRExFOUJRVTg3Y1VKQlFWRTdiVUpCUXpOQ08ydENRVU5NT3pzN2IwSkJRVWs3TzNkQ1FVRk5MRk5CUVZNc1JVRkJReXhyUWtGQmEwSTdPM0ZDUVVFMlFqdHZRa0ZCUXl4UFFVRlBMRU5CUVVNc1dVRkJXVHR0UWtGQlRUdHJRa0ZET1VZN096dHZRa0ZCU1RzN2QwSkJRVTBzVTBGQlV5eEZRVUZETEd0Q1FVRnJRanM3Y1VKQlFXbENPMjlDUVVGRExFOUJRVThzUTBGQlF5eFRRVUZUTzIxQ1FVRk5PMnRDUVVNdlJUczdPMjlDUVVGSk96dDNRa0ZCVFN4VFFVRlRMRVZCUVVNc2EwSkJRV3RDT3p0eFFrRkJZenR2UWtGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFR0dFFrRkJUVHRyUWtGRGVrVTdPenR2UWtGQlNUczdkMEpCUVUwc1UwRkJVeXhGUVVGRExHdENRVUZyUWpzN2NVSkJRV2xDTzI5Q1FVRkRMRTlCUVU4c1EwRkJReXhUUVVGVE8yMUNRVUZOTzJ0Q1FVTXZSVHM3YzBKQlFVa3NVMEZCVXl4RlFVRkRMSEZDUVVGeFFqdHZRa0ZCUXpzN2QwSkJRVTBzVTBGQlV5eEZRVUZETEd0Q1FVRnJRanM3Y1VKQlFXOUNPMjlDUVVVelJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVXl4SFFVRkhMRVZCUVVVN1FVRkRha1FzTmtKQlFVODdPenQzUWtGQlRTeEhRVUZIT3p0M1FrRkJTU3hQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEVkQlFVY3NRMEZCUXp0MVFrRkJUeXhEUVVGRE8zRkNRVU40UkN4RFFVRkRPMjFDUVVOeFFqdHJRa0ZEVERzN08yOUNRVUZKT3p0M1FrRkJUU3hUUVVGVExFVkJRVU1zYTBKQlFXdENPenR4UWtGQmEwSTdiMEpCUVVNc1QwRkJUeXhEUVVGRExGVkJRVlU3YlVKQlFVMDdhMEpCUTJwR096dHpRa0ZCU1N4VFFVRlRMRVZCUVVNc2NVSkJRWEZDTzI5Q1FVRkRPenQzUWtGQlRTeFRRVUZUTEVWQlFVTXNhMEpCUVd0Q096dHhRa0ZCTWtJN08yOUNRVUZGTEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRE96dHZRa0ZCU1N4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUTBGQlF6czdiVUpCUVU4N2EwSkJRMmhLT3pzN2IwSkJRVWs3TzNkQ1FVRk5MRk5CUVZNc1JVRkJReXhyUWtGQmEwSTdPM0ZDUVVGbE8yOUNRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBPMjFDUVVGTk8ydENRVU16UlRzN08yOUNRVUZKT3p0M1FrRkJUU3hUUVVGVExFVkJRVU1zYTBKQlFXdENPenR4UWtGQldUdHZRa0ZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTVHR0UWtGQlRUdHJRa0ZEY2tVN096dHZRa0ZCU1RzN2QwSkJRVTBzVTBGQlV5eEZRVUZETEd0Q1FVRnJRanM3Y1VKQlFWazdiMEpCUVVNc1QwRkJUeXhEUVVGRExFbEJRVWs3YlVKQlFVMDdhMEpCUTNKRk96czdiMEpCUVVrN08zZENRVUZOTEZOQlFWTXNSVUZCUXl4clFrRkJhMEk3TzNGQ1FVRnBRanR2UWtGQlF5eFBRVUZQTEVOQlFVTXNVMEZCVXp0dFFrRkJUVHRyUWtGREwwVTdPenR2UWtGQlNUczdkMEpCUVUwc1UwRkJVeXhGUVVGRExHdENRVUZyUWpzN2NVSkJRV1U3YjBKQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4N2JVSkJRVTA3YTBKQlF6TkZPenM3YjBKQlFVazdPM2RDUVVGTkxGTkJRVk1zUlVGQlF5eHJRa0ZCYTBJN08zRkNRVUZ0UWp0dlFrRkJReXhQUVVGUExFTkJRVU1zVlVGQlZUdHRRa0ZCVFR0clFrRkRiRVk3T3p0dlFrRkJTVHM3ZDBKQlFVMHNVMEZCVXl4RlFVRkRMR3RDUVVGclFqczdjVUpCUVhGQ08yOUNRVUZETEU5QlFVOHNRMEZCUXl4WlFVRlpPMjFDUVVGTk8ydENRVU4wUmpzN08yOUNRVUZKT3p0M1FrRkJUU3hUUVVGVExFVkJRVU1zYTBKQlFXdENPenR4UWtGQmQwSTdiMEpCUVVNc1QwRkJUeXhEUVVGRExHTkJRV003YlVKQlFVMDdhMEpCUXpOR096czdiMEpCUVVrN08zZENRVUZOTEZOQlFWTXNSVUZCUXl4clFrRkJhMEk3TzNGQ1FVRnJRanR2UWtGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlR0dFFrRkJUVHRyUWtGRGFrWTdPenR2UWtGQlNUczdkMEpCUVUwc1UwRkJVeXhGUVVGRExHdENRVUZyUWpzN2NVSkJRV2xDTzI5Q1FVRkRMRTlCUVU4c1EwRkJReXhUUVVGVE8yMUNRVUZOTzJsQ1FVTTFSVHRsUVVOR0xFTkJRMDQ3WVVGRFJpeERRVUZETzFkQlJVTTdVMEZEUkN4RFFVTlFPMDlCUTBZN08wdEJSVVlzUTBGQlF5eERRVUZET3pzN096dEJRVkZJTEV0QlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1YwRkJWeXhIUVVGSExHdEZRVUZyUlN4RFFVRkRPenRCUVVVeFJpeFJRVUZKTEVkQlFVY3NSMEZCUnl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRE96czdRVUZITVVJc2NVSkJRV1VzUlVGQlJTd3lRa0ZCVnp0QlFVTXhRaXhsUVVGUE8wRkJRMHdzWjBKQlFVMHNSVUZCUlN4RlFVRkZPMU5CUTFnc1EwRkJRVHRQUVVOR096dEJRVWRFTEdWQlFWTXNSVUZCUlN4dFFrRkJVeXhQUVVGUExFVkJRVVU3UVVGRE0wSXNXVUZCU1N4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4RlFVRkZMR2RDUVVGblFpeEZRVUZGTEVWQlFVVXNWMEZCVnl4RlFVRkZMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRE1VVXNaVUZCVHl4SFFVRkhMRU5CUVVNN1QwRkRXanM3UVVGSFJDeGpRVUZSTEVWQlFVVXNiMEpCUVZjN1FVRkRia0lzV1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VDBGRGNrVTdPMEZCUjBRc2EwSkJRVmtzUlVGQlJTeDNRa0ZCVnpzN1FVRkZka0lzV1VGQlNTeFBRVUZQTEVkQlFVY3NRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhaUVVGWkxFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRM1JFTEZsQlFVa3NRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlF5eFJRVUZSTEVWQlFVVXNWVUZCVlN4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPenRCUVVVMVJDeFRRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMR2REUVVGblF5eEZRVUZGTEZWQlFWTXNTVUZCU1N4RlFVRkZPMEZCUTNwRUxHbENRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE96dEJRVVY2UWl4cFFrRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eFZRVUZUTEV0QlFVc3NSVUZCUlR0QlFVTm9ReXhwUWtGQlN5eERRVUZETEVWQlFVVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1ZVRkJVeXhEUVVGRExFVkJRVVU3TzBGQlJUVkNMR3RDUVVGSkxFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTNwR0xIRkNRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkZMRU5CUVVNc1EwRkJReXhYUVVGWExFZEJRVU1zUlVGQlJTeEhRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkZMRU5CUVVNN08wRkJSWEpETEdWQlFVTXNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF6czdRVUZGTjBJc1pVRkJReXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03UVVGRE1VTXNaVUZCUXl4RFFVRkRMRmRCUVZjc1IwRkJReXhGUVVGRkxFZEJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRk5CUVZNc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF6dGhRVVV2UXl4RFFVRkRMRU5CUVVFN1YwRkRTQ3hEUVVGRExFTkJRVUU3VTBGRlNDeERRVUZETEVOQlFVRTdUMEZMU0RzN1FVRkZSQ3gxUWtGQmFVSXNSVUZCUlN3MlFrRkJWenRCUVVNMVFpeFpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhGUVVGRk8wRkJRM1JDTEdOQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRExFTkJRVU03VTBGRGRFUXNUVUZCVFR0QlFVTklMR05CUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFRRVU5vUkRzN1FVRkZSQ3haUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTTdRVUZEYUVJc1dVRkJTU3hEUVVGRExGbEJRVmtzUlVGQlJTeERRVUZETzA5QlJYSkNPenRCUVVWRUxHZENRVUZWTEVWQlFVVXNjMEpCUVZjc1JVRkZkRUk3TzBGQlJVUXNXVUZCVFN4RlFVRkZMR3RDUVVGWE8wRkJRMnBDTEdWQlEwVXNOa0pCUVVzc1UwRkJVeXhGUVVGRExFdEJRVXNzUjBGQlR5eERRVU0xUWp0UFFVTkdPenRMUVVWR0xFTkJRVU1zUTBGQlF6czdRVUZKU0N4UlFVRkpMRk5CUVZNc1IwRkJSeXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZET3pzN1FVRkRhRU1zV1VGQlRTeEZRVUZGTEd0Q1FVRlhPMEZCUTJwQ0xHVkJRMFU3TzFsQlFVc3NVMEZCVXl4RlFVRkRMRmRCUVZjN1ZVRkRlRUlzYjBKQlFVTXNSMEZCUnl4SlFVRkRMRWRCUVVjc1JVRkJReXhIUVVGSExFVkJRVU1zUjBGQlJ5eEZRVUZETEVkQlFVY3NSVUZCUXl4SlFVRkpMRVZCUVVNc1IwRkJSeXhIUVVGRk8xVkJReTlDTEc5Q1FVRkRMRTFCUVUwc1QwRkJSenRUUVVOT0xFTkJRMUE3VDBGRFJqdExRVU5HTEVOQlFVTXNRMEZCUXpzN1FVRkhTQ3hUUVVGTExFTkJRVU1zVFVGQlRTeERRVU5XTEc5Q1FVRkRMRk5CUVZNc1QwRkJSeXhGUVVOaUxGRkJRVkVzUTBGQlF5eGpRVUZqTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUTJwRExFTkJRVUU3UjBGSlFTeERRVUZCTzBOQlJVRXNRMEZCUVN4RlFVRkhMRU5CUVVFaUxDSm1hV3hsSWpvaVF6b3ZkMkZ0Y0M5M2QzY3ZiR0ZpTDJOdmRXNTBjbmxmYVc1bWJ5OXpjbU12WVhOelpYUnpMMnB6TDNKbFlXTjBMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUtHWjFibU4wYVc5dUtDa2dlMXh5WEc1Y2NseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dVhISmNiaThxWEhKY2JpQXFJRkJoYm1Wc2MxeHlYRzRnS2k5Y2NseHVkbUZ5SUZCaGJtVnNjeUE5SUZKbFlXTjBMbU55WldGMFpVTnNZWE56S0h0Y2NseHVYSEpjYmlBZ1oyVjBTVzVwZEdsaGJGTjBZWFJsT2lCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNBZ0lISmxkSFZ5YmlCN1hISmNiaUFnSUNBZ0lHTnZkVzUwY21sbGN6b2dXMTBzWEhKY2JpQWdJQ0I5WEhKY2JpQWdmU3hjY2x4dVhISmNibHh5WEc0Z0lHTnZiWEJ2Ym1WdWRFUnBaRTF2ZFc1ME9pQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dUlDQWdJQ1F1WVdwaGVDaDdYSEpjYmlBZ0lDQWdJSFZ5YkRvZ0oyaDBkSEJ6T2k4dmNtVnpkR052ZFc1MGNtbGxjeTEyTVM1d0xtMWhjMmhoY0dVdVkyOXRMMkZzYkNjc1hISmNiaUFnSUNBZ0lIUjVjR1U2SUNkSFJWUW5MRnh5WEc0Z0lDQWdJQ0JrWVhSaE9pQjdmU3hjY2x4dUlDQWdJQ0FnWkdGMFlYUjVjR1U2SUNkcWMyOXVKeXhjY2x4dUlDQWdJQ0FnYzNWalkyVnpjem9nWm5WdVkzUnBiMjRvWTI5MWJuUnlhV1Z6S1NCN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhaaGNpQmpiM1Z1ZEhKcFpYTWdQU0JqYjNWdWRISnBaWE03WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbWx6VFc5MWJuUmxaQ2dwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOTFiblJ5YVdWek9pQmpiM1Z1ZEhKcFpYTmNjbHh1SUNBZ0lDQWdJQ0FnSUgwcFhISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ2ZTNWlhVzVrS0hSb2FYTXBMQ0F2THlCbGJtUWdjM1ZqWTJWemMxeHlYRzRnSUNBZ0lDQmxjbkp2Y2pvZ1puVnVZM1JwYjI0b1pYSnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29aWEp5S1R0Y2NseHVJQ0FnSUNBZ2ZTNWlhVzVrS0hSb2FYTXBMQ0F2THlCbGJtUWdaWEp5YjNKY2NseHVJQ0FnSUNBZ1ltVm1iM0psVTJWdVpEb2dablZ1WTNScGIyNG9lR2h5S1NCN1hISmNiaUFnSUNBZ0lDQWdlR2h5TG5ObGRGSmxjWFZsYzNSSVpXRmtaWElvWENKWUxVMWhjMmhoY0dVdFFYVjBhRzl5YVhwaGRHbHZibHdpTENCY0lrb3hNR0ZDVFVFMFkwRnRjMmh2UTJwSGIyaDZObEZZTkRKVlRXeHdNV1IxTWxnNWFuTnVXbEpWVVdFd1VVeEpRMjVqWENJcE8xeHlYRzRnSUNBZ0lDQjlJQzh2SUdWdVpDQmlaV1p2Y21WVFpXNWtYSEpjYmx4eVhHNGdJQ0FnZlNrdVpHOXVaU2htZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUNBZ0pDZ25MbkJ5Wld4dllXUmxjaWNwTG1aaFpHVlBkWFFvTVRBd01DazdYSEpjYmlBZ0lDQWdJQ1FvSnk1cGJuTjBjblZqZEdsdmJuTW5LUzVtWVdSbFNXNG9LVHRjY2x4dUlDQWdJSDBwT3lBdkx5QmxibVFnWVdwaGVGeHlYRzRnSUgwc1hISmNibHh5WEc1Y2NseHVJQ0J5Wlc1a1pYSTZJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJQ2hjY2x4dUlDQWdJQ0FnUEdScGRpQmpiR0Z6YzA1aGJXVTlYQ0p3WVc1bGJITmNJajVjY2x4dUlDQWdJQ0FnSUNBOGRXd2dZMnhoYzNOT1lXMWxQVndpY0dGdVpXeHpYMTlqYjI1MFlXbHVaWEpjSWo1Y2NseHVJQ0FnSUNBZ0lDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4wWVhSbExtTnZkVzUwY21sbGN5NXRZWEFvWm5WdVkzUnBiMjRvWTI5MWJuUnllU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCamIyNXpiMnhsTG14dlp5aGpiM1Z1ZEhKNUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGJHa2dZMnhoYzNOT1lXMWxQVndpY0dGdVpXeHpYMTlwZEdWdFhDSWdhWFJsYlVsRVBYdGpiM1Z1ZEhKNUxtNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tTNXlaWEJzWVdObEtDOGdMMmNzSUNjbktYMCtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YURJK2UyTnZkVzUwY25rdWJtRnRaWDA4TDJneVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSFZzUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThiR2srWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSE53WVc0Z1kyeGhjM05PWVcxbFBWd2ljR0Z1Wld4elgxOXdjbTl3WlhKMGVWd2lQa05oY0dsMFlXdzhMM053WVc0K1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhOd1lXNCtlMk52ZFc1MGNua3VZMkZ3YVhSaGJIMDhMM053WVc0K1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2YkdrK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhzYVQ0OGMzQmhiaUJqYkdGemMwNWhiV1U5WENKd1lXNWxiSE5mWDNCeWIzQmxjblI1WENJK1FXeDBaWEp1WVhScGRtVWdVM0JsYkd4cGJtZHpQQzl6Y0dGdVBudGpiM1Z1ZEhKNUxtRnNkRk53Wld4c2FXNW5jMzA4TDJ4cFBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YkdrK1BITndZVzRnWTJ4aGMzTk9ZVzFsUFZ3aWNHRnVaV3h6WDE5d2NtOXdaWEowZVZ3aVBsSmxiR1YyWVc1alpUd3ZjM0JoYmo1N1kyOTFiblJ5ZVM1eVpXeGxkbUZ1WTJWOVBDOXNhVDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHeHBQanh6Y0dGdUlHTnNZWE56VG1GdFpUMWNJbkJoYm1Wc2MxOWZjSEp2Y0dWeWRIbGNJajVTWldkcGIyNDhMM053WVc0K2UyTnZkVzUwY25rdWNtVm5hVzl1ZlR3dmJHaytYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4c2FUNDhjM0JoYmlCamJHRnpjMDVoYldVOVhDSndZVzVsYkhOZlgzQnliM0JsY25SNVhDSStVM1ZpY21WbmFXOXVQQzl6Y0dGdVBudGpiM1Z1ZEhKNUxuTjFZbkpsWjJsdmJuMDhMMnhwUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThiR2tnWTJ4aGMzTk9ZVzFsUFZ3aWNHRnVaV3h6WDE5dlltcGxZM1F0TFc1dlkxd2lQanh6Y0dGdUlHTnNZWE56VG1GdFpUMWNJbkJoYm1Wc2MxOWZjSEp2Y0dWeWRIbGNJajVVY21GdWMyeGhkR2x2Ym5NOEwzTndZVzQrWEhKY2JseHlYRzU3VDJKcVpXTjBMbXRsZVhNb1kyOTFiblJ5ZVM1MGNtRnVjMnhoZEdsdmJuTXBMbTFoY0NobWRXNWpkR2x2YmloclpYa3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQThaR2wyUG50clpYbDlPaUI3WTI5MWJuUnllUzUwY21GdWMyeGhkR2x2Ym5OYmEyVjVYWDA4TDJScGRqNDdYSEpjYm4wcGZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJ4cFBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YkdrK1BITndZVzRnWTJ4aGMzTk9ZVzFsUFZ3aWNHRnVaV3h6WDE5d2NtOXdaWEowZVZ3aVBsQnZjSFZzWVhScGIyNDhMM053WVc0K2UyTnZkVzUwY25rdWNHOXdkV3hoZEdsdmJuMDhMMnhwUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThiR2tnWTJ4aGMzTk9ZVzFsUFZ3aWNHRnVaV3h6WDE5dlltcGxZM1F0TFc1dlkxd2lQanh6Y0dGdUlHTnNZWE56VG1GdFpUMWNJbkJoYm1Wc2MxOWZjSEp2Y0dWeWRIbGNJajVNWVhScGRIVmtaU3dnVEc5dVoybDBkV1JsUEM5emNHRnVQbHQ3WTI5MWJuUnllUzVzWVhSc2JtZGJNRjE5TENCN1kyOTFiblJ5ZVM1c1lYUnNibWRiTVYxOVhUd3ZiR2srWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHNhVDQ4YzNCaGJpQmpiR0Z6YzA1aGJXVTlYQ0p3WVc1bGJITmZYM0J5YjNCbGNuUjVYQ0krUkdWdGIyNTViVHd2YzNCaGJqNTdZMjkxYm5SeWVTNWtaVzF2Ym5sdGZUd3ZiR2srWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHNhVDQ4YzNCaGJpQmpiR0Z6YzA1aGJXVTlYQ0p3WVc1bGJITmZYM0J5YjNCbGNuUjVYQ0krUVhKbFlUd3ZjM0JoYmo1N1kyOTFiblJ5ZVM1aGNtVmhmVHd2YkdrK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhzYVQ0OGMzQmhiaUJqYkdGemMwNWhiV1U5WENKd1lXNWxiSE5mWDNCeWIzQmxjblI1WENJK1IybHVhVHd2YzNCaGJqNTdZMjkxYm5SeWVTNW5hVzVwZlR3dmJHaytYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4c2FUNDhjM0JoYmlCamJHRnpjMDVoYldVOVhDSndZVzVsYkhOZlgzQnliM0JsY25SNVhDSStWR2x0WlhwdmJtVnpQQzl6Y0dGdVBudGpiM1Z1ZEhKNUxuUnBiV1Y2YjI1bGMzMDhMMnhwUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThiR2srUEhOd1lXNGdZMnhoYzNOT1lXMWxQVndpY0dGdVpXeHpYMTl3Y205d1pYSjBlVndpUGtKdmNtUmxjbk04TDNOd1lXNCtlMk52ZFc1MGNua3VZbTl5WkdWeWMzMDhMMnhwUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThiR2srUEhOd1lXNGdZMnhoYzNOT1lXMWxQVndpY0dGdVpXeHpYMTl3Y205d1pYSjBlVndpUGs1aGRHbDJaU0JPWVcxbFBDOXpjR0Z1UG50amIzVnVkSEo1TG01aGRHbDJaVTVoYldWOVBDOXNhVDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHeHBQanh6Y0dGdUlHTnNZWE56VG1GdFpUMWNJbkJoYm1Wc2MxOWZjSEp2Y0dWeWRIbGNJajVEWVd4c2FXNW5JRU52WkdWelBDOXpjR0Z1UG50amIzVnVkSEo1TG1OaGJHeHBibWREYjJSbGMzMDhMMnhwUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThiR2srUEhOd1lXNGdZMnhoYzNOT1lXMWxQVndpY0dGdVpXeHpYMTl3Y205d1pYSjBlVndpUGxSdmNDQk1aWFpsYkNCRWIyMWhhVzQ4TDNOd1lXNCtlMk52ZFc1MGNua3VkRzl3VEdWMlpXeEViMjFoYVc1OVBDOXNhVDVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHeHBQanh6Y0dGdUlHTnNZWE56VG1GdFpUMWNJbkJoYm1Wc2MxOWZjSEp2Y0dWeWRIbGNJajVEZFhKeVpXNWphV1Z6UEM5emNHRnVQbnRqYjNWdWRISjVMbU4xY25KbGJtTnBaWE45UEM5c2FUNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEd4cFBqeHpjR0Z1SUdOc1lYTnpUbUZ0WlQxY0luQmhibVZzYzE5ZmNISnZjR1Z5ZEhsY0lqNU1ZVzVuZFdGblpYTThMM053WVc0K2UyTnZkVzUwY25rdWJHRnVaM1ZoWjJWemZUd3ZiR2srWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwzVnNQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRHd2YkdrK1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNsY2NseHVJQ0FnSUNBZ0lDQWdJSDBwWEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJRHd2ZFd3K1hISmNiaUFnSUNBZ0lEd3ZaR2wyUGx4eVhHNGdJQ0FnS1Z4eVhHNGdJSDFjY2x4dVhISmNibjBwTzF4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dUx5cGNjbHh1SUNvZ1RXRndYSEpjYmlBcUwxeHlYRzVNTG0xaGNHSnZlQzVoWTJObGMzTlViMnRsYmlBOUlDZHdheTVsZVVveFNXcHZhVmxYT1hwaFYzUm9TV2wzYVZsVFNUWkphbEY2VWtkSmVHVkZhMmxtVVM0M1QzWnRlVUppV0hkM2REbFJlR3BzYURsUlpETjNKenRjY2x4dVhISmNiblpoY2lCTllYQWdQU0JTWldGamRDNWpjbVZoZEdWRGJHRnpjeWg3WEhKY2JseHlYRzVjY2x4dUlDQm5aWFJKYm1sMGFXRnNVM1JoZEdVNklHWjFibU4wYVc5dUtDa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlIdGNjbHh1SUNBZ0lDQWdiR0Y1WlhKek9pQW5KeXhjY2x4dUlDQWdJSDFjY2x4dUlDQjlMRnh5WEc1Y2NseHVYSEpjYmlBZ1kzSmxZWFJsVFdGd09pQm1kVzVqZEdsdmJpaGxiR1Z0Wlc1MEtTQjdYSEpjYmlBZ0lDQjJZWElnYldGd0lEMGdUQzV0WVhCaWIzZ3ViV0Z3S0dWc1pXMWxiblFzSUNkdFlYQmliM2d1YzNSeVpXVjBjeWNzSUhzZ2VtOXZiVU52Ym5SeWIydzZJR1poYkhObElIMHBPMXh5WEc0Z0lDQWdjbVYwZFhKdUlHMWhjRHRjY2x4dUlDQjlMRnh5WEc1Y2NseHVYSEpjYmlBZ2MyVjBkWEJOWVhBNklHWjFibU4wYVc5dUtDa2dlMXh5WEc0Z0lDQWdkR2hwY3k1dFlYQXVjMlYwVm1sbGR5aGJkR2hwY3k1d2NtOXdjeTVzWVhRc0lIUm9hWE11Y0hKdmNITXViRzl1WFN3Z2RHaHBjeTV3Y205d2N5NTZiMjl0S1R0Y2NseHVJQ0I5TEZ4eVhHNWNjbHh1WEhKY2JpQWdZM0psWVhSbFRHRjVaWEp6T2lCbWRXNWpkR2x2YmlncElIdGNjbHh1WEhKY2JpQWdJQ0IyWVhJZ2JYbE1ZWGxsY2lBOUlFd3ViV0Z3WW05NExtWmxZWFIxY21WTVlYbGxjaWdwTG1Ga1pGUnZLSFJvYVhNdWJXRndLVHRjY2x4dUlDQWdJRzVsZHlCTUxrTnZiblJ5YjJ3dVdtOXZiU2g3Y0c5emFYUnBiMjQ2SUNkMGIzQnlhV2RvZENjZ2ZTa3VZV1JrVkc4b2RHaHBjeTV0WVhBcE8xeHlYRzVjY2x4dUlDQWdJQ1F1WjJWMFNsTlBUaWduWVhOelpYUnpMMlJoZEdFdlkyOTFiblJ5YVdWekxtZGxieTVxYzI5dUp5d2dablZ1WTNScGIyNG9aR0YwWVNrZ2UxeHlYRzRnSUNBZ0lDQnRlVXhoZVdWeUxuTmxkRWRsYjBwVFQwNG9aR0YwWVNrN1hISmNibHh5WEc0Z0lDQWdJQ0J0ZVV4aGVXVnlMbVZoWTJoTVlYbGxjaWhtZFc1amRHbHZiaWhzWVhsbGNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUd4aGVXVnlMbTl1S0NkamJHbGpheWNzSUdaMWJtTjBhVzl1S0dVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUZ4eVhHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUdsa0lEMGdKQ2gwYUdsektWc3dYUzVtWldGMGRYSmxMbkJ5YjNCbGNuUnBaWE11Ym1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwTG5KbGNHeGhZMlVvTHlBdlp5d2dKeWNwTG5Oc2FXTmxLREFzSURFeUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDQWtLQ2RiYVhSbGJXbGtLajBuSzJsa0t5ZGRKeWtnS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBa0tDY3VhVzV6ZEhKMVkzUnBiMjV6SnlrdVptRmtaVTkxZENncE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDUW9KeTV3WVc1bGJITmZYMmwwWlcwbktTNWpjM01vSjJScGMzQnNZWGtuTENBbmJtOXVaU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdKQ2duVzJsMFpXMXBaQ285Snl0cFpDc25YU2NwTG1OemN5Z25aR2x6Y0d4aGVTY3NJQ2RpYkc5amF5Y3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjlLVnh5WEc0Z0lDQWdJQ0I5S1Z4eVhHNWNjbHh1SUNBZ0lIMHBYSEpjYmx4eVhHNWNjbHh1WEhKY2JseHlYRzRnSUgwc1hISmNibHh5WEc0Z0lHTnZiWEJ2Ym1WdWRFUnBaRTF2ZFc1ME9pQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dUlDQWdJR2xtSUNoMGFHbHpMbkJ5YjNCekxtTnlaV0YwWlUxaGNDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXViV0Z3SUQwZ2RHaHBjeTV3Y205d2N5NWpjbVZoZEdWTllYQW9kR2hwY3k1blpYUkVUMDFPYjJSbEtDa3BPMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtMWhjQ0E5SUhSb2FYTXVZM0psWVhSbFRXRndLSFJvYVhNdVoyVjBSRTlOVG05a1pTZ3BLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCMGFHbHpMbk5sZEhWd1RXRndLQ2s3WEhKY2JpQWdJQ0IwYUdsekxtTnlaV0YwWlV4aGVXVnljeWdwTzF4eVhHNWNjbHh1SUNCOUxGeHlYRzVjY2x4dUlDQnZiazFoY0VOc2FXTnJPaUJtZFc1amRHbHZiaWdwSUh0Y2NseHVYSEpjYmlBZ2ZTeGNjbHh1WEhKY2JpQWdjbVZ1WkdWeU9pQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQW9YSEpjYmlBZ0lDQWdJRHhrYVhZZ1kyeGhjM05PWVcxbFBTZHRZWEFuUGp3dlpHbDJQbHh5WEc0Z0lDQWdLVnh5WEc0Z0lIMWNjbHh1WEhKY2JuMHBPMXh5WEc1Y2NseHVYSEpjYmx4eVhHNTJZWElnUTI5dWRHRnBibVZ5SUQwZ1VtVmhZM1F1WTNKbFlYUmxRMnhoYzNNb2UxeHlYRzRnSUhKbGJtUmxjam9nWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnS0Z4eVhHNGdJQ0FnSUNBOFpHbDJJR05zWVhOelRtRnRaVDFjSW1OdmJuUmhhVzVsY2x3aVBseHlYRzRnSUNBZ0lDQWdJRHhOWVhBZ2JHRjBQVndpTUZ3aUlHeHZiajFjSWpCY0lpQjZiMjl0UFZ3aU0xd2lMejVjY2x4dUlDQWdJQ0FnSUNBOFVHRnVaV3h6SUM4K1hISmNiaUFnSUNBZ0lEd3ZaR2wyUGx4eVhHNGdJQ0FnS1Z4eVhHNGdJSDFjY2x4dWZTazdYSEpjYmx4eVhHNWNjbHh1VW1WaFkzUXVjbVZ1WkdWeUtGeHlYRzRnSUR4RGIyNTBZV2x1WlhJZ0x6NHNYSEpjYmlBZ1pHOWpkVzFsYm5RdVoyVjBSV3hsYldWdWRFSjVTV1FvSjIxdmRXNTBKeWxjY2x4dUtWeHlYRzVjY2x4dVhISmNibHh5WEc1OVhISmNibHh5WEc1OUtTZ3BYSEpjYmx4eVhHNWNjbHh1WEhKY2JseHlYRzVjY2x4dUlsMTkiXX0=
