(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var app = require('./react.js');

app();


},{"./react.js":2}],2:[function(require,module,exports){
'use strict';

(function () {

  module.exports = function () {

    /*
     * Panels
     */
    var Panels = React.createClass({
      displayName: 'Panels',

      getInitialState: function getInitialState() {
        return {
          countries: []
        };
      },

      componentDidMount: function componentDidMount() {
        $.ajax({
          url: 'https://restcountries-v1.p.mashape.com/all',
          type: 'GET',
          data: {},
          datatype: 'json',
          success: (function (countries) {

            var countries = countries;

            if (this.isMounted()) {
              this.setState({
                countries: countries
              });
            }
          }).bind(this), // end success
          error: (function (err) {
            console.log(err);
          }).bind(this), // end error
          beforeSend: function beforeSend(xhr) {
            xhr.setRequestHeader("X-Mashape-Authorization", "J10aBMA4cAmshoCjGohz6QX42UMlp1du2X9jsnZRUQa0QLICnc");
          } // end beforeSend

        }); // end ajax
      },

      render: function render() {
        return React.createElement(
          'div',
          { className: 'panels' },
          React.createElement(
            'ul',
            { className: 'panels__container' },
            this.state.countries.map(function (country) {
              // console.log(country);
              return React.createElement(
                'li',
                { className: 'panels__item', itemID: country.name.toLowerCase().replace(/ /g, '') },
                React.createElement(
                  'h2',
                  null,
                  country.name
                ),
                React.createElement(
                  'ul',
                  null,
                  React.createElement(
                    'li',
                    null,
                    'Capital ',
                    React.createElement(
                      'span',
                      null,
                      country.capital
                    )
                  ),
                  React.createElement(
                    'li',
                    null,
                    'Alternative Spellings: ',
                    country.altSpellings
                  ),
                  React.createElement(
                    'li',
                    null,
                    country.region
                  )
                )
              );
            })
          )
        );
      }

    });

    /*
     * Map
     */
    L.mapbox.accessToken = 'pk.eyJ1IjoiYW9zaWthIiwiYSI6IjQzRGIxeEkifQ.7OvmyBbXwwt9Qxjlh9Qd3w';

    var Map = React.createClass({
      displayName: 'Map',

      getInitialState: function getInitialState() {
        return {
          layers: ''
        };
      },

      createMap: function createMap(element) {
        var map = L.mapbox.map(element, 'mapbox.streets', { zoomControl: false });
        return map;
      },

      setupMap: function setupMap() {
        this.map.setView([this.props.lat, this.props.lon], this.props.zoom);
      },

      createLayers: function createLayers() {

        var myLayer = L.mapbox.featureLayer().addTo(this.map);
        new L.Control.Zoom({ position: 'topright' }).addTo(this.map);

        $.getJSON('assets/data/countries.geo.json', function (data) {
          myLayer.setGeoJSON(data);

          myLayer.eachLayer(function (layer) {
            layer.on('click', function (e) {

              var id = $(this)[0].feature.properties.name.toLowerCase().replace(/ /g, '').slice(0, 12);
              console.log($('[itemid*=' + id + ']'));

              $('.instructions').fadeOut();

              $('.panels__item').removeClass('panels__item--active');
              $('[itemid*=' + id + ']').addClass('panels__item--active');

              console.log($(this));
            });
          });
        }).done(function () {
          $('.preloader').fadeOut(1000);
        });
      },

      componentDidMount: function componentDidMount() {
        if (this.props.createMap) {
          this.map = this.props.createMap(this.getDOMNode());
        } else {
          this.map = this.createMap(this.getDOMNode());
        }

        this.setupMap();
        this.createLayers();
      },

      onMapClick: function onMapClick() {},

      render: function render() {
        return React.createElement('div', { className: 'map' });
      }

    });

    var Container = React.createClass({
      displayName: 'Container',

      render: function render() {
        return React.createElement(
          'div',
          { className: 'container' },
          React.createElement(Map, { lat: '0', lon: '0', zoom: '2' }),
          React.createElement(Panels, null)
        );
      }
    });

    React.render(React.createElement(Container, null), document.getElementById('mount'));
  };
})();


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJDOlxcd2FtcFxcd3d3XFxsYWJcXGNvdW50cnlfaW5mb1xcc3JjXFxhc3NldHNcXGpzXFxhcHAuanMiLCJDOlxcd2FtcFxcd3d3XFxsYWJcXGNvdW50cnlfaW5mb1xcc3JjXFxhc3NldHNcXGpzXFxyZWFjdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLFlBQVksQ0FBQzs7QUFFYixJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7O0FBRWhDLEdBQUcsRUFBRSxDQUFDO0FBQ047OztBQ0xBLFlBQVksQ0FBQzs7QUFFYixDQUFDLFlBQVk7O0FBRWIsRUFBRSxNQUFNLENBQUMsT0FBTyxHQUFHLFlBQVk7QUFDL0I7QUFDQTtBQUNBOztJQUVJLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7QUFDbkMsTUFBTSxXQUFXLEVBQUUsUUFBUTs7TUFFckIsZUFBZSxFQUFFLFNBQVMsZUFBZSxHQUFHO1FBQzFDLE9BQU87VUFDTCxTQUFTLEVBQUUsRUFBRTtTQUNkLENBQUM7QUFDVixPQUFPOztNQUVELGlCQUFpQixFQUFFLFNBQVMsaUJBQWlCLEdBQUc7UUFDOUMsQ0FBQyxDQUFDLElBQUksQ0FBQztVQUNMLEdBQUcsRUFBRSw0Q0FBNEM7VUFDakQsSUFBSSxFQUFFLEtBQUs7VUFDWCxJQUFJLEVBQUUsRUFBRTtVQUNSLFFBQVEsRUFBRSxNQUFNO0FBQzFCLFVBQVUsT0FBTyxFQUFFLENBQUMsVUFBVSxTQUFTLEVBQUU7O0FBRXpDLFlBQVksSUFBSSxTQUFTLEdBQUcsU0FBUyxDQUFDOztZQUUxQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRTtjQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUNaLFNBQVMsRUFBRSxTQUFTO2VBQ3JCLENBQUMsQ0FBQzthQUNKO1dBQ0YsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO1VBQ2IsS0FBSyxFQUFFLENBQUMsVUFBVSxHQUFHLEVBQUU7WUFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztXQUNsQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7VUFDYixVQUFVLEVBQUUsU0FBUyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ25DLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyx5QkFBeUIsRUFBRSxvREFBb0QsQ0FBQyxDQUFDO0FBQ2xILFdBQVc7O1NBRUYsQ0FBQyxDQUFDO0FBQ1gsT0FBTzs7TUFFRCxNQUFNLEVBQUUsU0FBUyxNQUFNLEdBQUc7UUFDeEIsT0FBTyxLQUFLLENBQUMsYUFBYTtVQUN4QixLQUFLO1VBQ0wsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFO1VBQ3ZCLEtBQUssQ0FBQyxhQUFhO1lBQ2pCLElBQUk7WUFDSixFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBRTtBQUM5QyxZQUFZLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxVQUFVLE9BQU8sRUFBRTs7Y0FFMUMsT0FBTyxLQUFLLENBQUMsYUFBYTtnQkFDeEIsSUFBSTtnQkFDSixFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDbkYsS0FBSyxDQUFDLGFBQWE7a0JBQ2pCLElBQUk7a0JBQ0osSUFBSTtrQkFDSixPQUFPLENBQUMsSUFBSTtpQkFDYjtnQkFDRCxLQUFLLENBQUMsYUFBYTtrQkFDakIsSUFBSTtrQkFDSixJQUFJO2tCQUNKLEtBQUssQ0FBQyxhQUFhO29CQUNqQixJQUFJO29CQUNKLElBQUk7b0JBQ0osVUFBVTtvQkFDVixLQUFLLENBQUMsYUFBYTtzQkFDakIsTUFBTTtzQkFDTixJQUFJO3NCQUNKLE9BQU8sQ0FBQyxPQUFPO3FCQUNoQjttQkFDRjtrQkFDRCxLQUFLLENBQUMsYUFBYTtvQkFDakIsSUFBSTtvQkFDSixJQUFJO29CQUNKLHlCQUF5QjtvQkFDekIsT0FBTyxDQUFDLFlBQVk7bUJBQ3JCO2tCQUNELEtBQUssQ0FBQyxhQUFhO29CQUNqQixJQUFJO29CQUNKLElBQUk7b0JBQ0osT0FBTyxDQUFDLE1BQU07bUJBQ2Y7aUJBQ0Y7ZUFDRixDQUFDO2FBQ0gsQ0FBQztXQUNIO1NBQ0YsQ0FBQztBQUNWLE9BQU87O0FBRVAsS0FBSyxDQUFDLENBQUM7QUFDUDtBQUNBO0FBQ0E7O0FBRUEsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxrRUFBa0UsQ0FBQzs7SUFFMUYsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUNoQyxNQUFNLFdBQVcsRUFBRSxLQUFLOztNQUVsQixlQUFlLEVBQUUsU0FBUyxlQUFlLEdBQUc7UUFDMUMsT0FBTztVQUNMLE1BQU0sRUFBRSxFQUFFO1NBQ1gsQ0FBQztBQUNWLE9BQU87O01BRUQsU0FBUyxFQUFFLFNBQVMsU0FBUyxDQUFDLE9BQU8sRUFBRTtRQUNyQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMxRSxPQUFPLEdBQUcsQ0FBQztBQUNuQixPQUFPOztNQUVELFFBQVEsRUFBRSxTQUFTLFFBQVEsR0FBRztRQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1RSxPQUFPOztBQUVQLE1BQU0sWUFBWSxFQUFFLFNBQVMsWUFBWSxHQUFHOztRQUVwQyxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDOUQsUUFBUSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzs7UUFFN0QsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQ0FBZ0MsRUFBRSxVQUFVLElBQUksRUFBRTtBQUNwRSxVQUFVLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7O1VBRXpCLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBVSxLQUFLLEVBQUU7QUFDN0MsWUFBWSxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsRUFBRTs7Y0FFN0IsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN2RyxjQUFjLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQzs7QUFFckQsY0FBYyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7O2NBRTdCLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxXQUFXLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUNyRSxjQUFjLENBQUMsQ0FBQyxXQUFXLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDOztjQUUzRCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2FBQ3RCLENBQUMsQ0FBQztXQUNKLENBQUMsQ0FBQztTQUNKLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWTtVQUNsQixDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9CLENBQUMsQ0FBQztBQUNYLE9BQU87O01BRUQsaUJBQWlCLEVBQUUsU0FBUyxpQkFBaUIsR0FBRztRQUM5QyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFO1VBQ3hCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7U0FDcEQsTUFBTTtVQUNMLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUN2RCxTQUFTOztRQUVELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDNUIsT0FBTzs7QUFFUCxNQUFNLFVBQVUsRUFBRSxTQUFTLFVBQVUsR0FBRyxFQUFFOztNQUVwQyxNQUFNLEVBQUUsU0FBUyxNQUFNLEdBQUc7UUFDeEIsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ2hFLE9BQU87O0FBRVAsS0FBSyxDQUFDLENBQUM7O0lBRUgsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUN0QyxNQUFNLFdBQVcsRUFBRSxXQUFXOztNQUV4QixNQUFNLEVBQUUsU0FBUyxNQUFNLEdBQUc7UUFDeEIsT0FBTyxLQUFLLENBQUMsYUFBYTtVQUN4QixLQUFLO1VBQ0wsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFO1VBQzFCLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztVQUMzRCxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUM7U0FDbEMsQ0FBQztPQUNIO0FBQ1AsS0FBSyxDQUFDLENBQUM7O0lBRUgsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxRQUFRLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7R0FDdEYsQ0FBQztDQUNILEdBQUcsQ0FBQztBQUNMIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFwcCA9IHJlcXVpcmUoJy4vcmVhY3QuanMnKTtcblxuYXBwKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtNNkwzZGhiWEF2ZDNkM0wyeGhZaTlqYjNWdWRISjVYMmx1Wm04dmMzSmpMMkZ6YzJWMGN5OXFjeTloY0hBdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4SlFVRkpMRWRCUVVjc1IwRkJSeXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdPMEZCUldoRExFZEJRVWNzUlVGQlJTeERRVUZESWl3aVptbHNaU0k2SWtNNkwzZGhiWEF2ZDNkM0wyeGhZaTlqYjNWdWRISjVYMmx1Wm04dmMzSmpMMkZ6YzJWMGN5OXFjeTloY0hBdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUoyWVhJZ1lYQndJRDBnY21WeGRXbHlaU2duTGk5eVpXRmpkQzVxY3ljcE8xeHlYRzVjY2x4dVlYQndLQ2s3WEhKY2JpSmRmUT09IiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgLypcclxuICAgICAqIFBhbmVsc1xyXG4gICAgICovXG4gICAgdmFyIFBhbmVscyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICAgIGRpc3BsYXlOYW1lOiAnUGFuZWxzJyxcblxuICAgICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY291bnRyaWVzOiBbXVxuICAgICAgICB9O1xuICAgICAgfSxcblxuICAgICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgIHVybDogJ2h0dHBzOi8vcmVzdGNvdW50cmllcy12MS5wLm1hc2hhcGUuY29tL2FsbCcsXG4gICAgICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICAgICAgZGF0YToge30sXG4gICAgICAgICAgZGF0YXR5cGU6ICdqc29uJyxcbiAgICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24gKGNvdW50cmllcykge1xuXG4gICAgICAgICAgICB2YXIgY291bnRyaWVzID0gY291bnRyaWVzO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pc01vdW50ZWQoKSkge1xuICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBjb3VudHJpZXM6IGNvdW50cmllc1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS5iaW5kKHRoaXMpLCAvLyBlbmQgc3VjY2Vzc1xuICAgICAgICAgIGVycm9yOiAoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICB9KS5iaW5kKHRoaXMpLCAvLyBlbmQgZXJyb3JcbiAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbiBiZWZvcmVTZW5kKHhocikge1xuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJYLU1hc2hhcGUtQXV0aG9yaXphdGlvblwiLCBcIkoxMGFCTUE0Y0Ftc2hvQ2pHb2h6NlFYNDJVTWxwMWR1Mlg5anNuWlJVUWEwUUxJQ25jXCIpO1xuICAgICAgICAgIH0gLy8gZW5kIGJlZm9yZVNlbmRcblxuICAgICAgICB9KTsgLy8gZW5kIGFqYXhcbiAgICAgIH0sXG5cbiAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ3BhbmVscycgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ3VsJyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncGFuZWxzX19jb250YWluZXInIH0sXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmNvdW50cmllcy5tYXAoZnVuY3Rpb24gKGNvdW50cnkpIHtcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coY291bnRyeSk7XG4gICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdwYW5lbHNfX2l0ZW0nLCBpdGVtSUQ6IGNvdW50cnkubmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyAvZywgJycpIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICdoMicsXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgY291bnRyeS5uYW1lXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgJ3VsJyxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAnQ2FwaXRhbCAnLFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICdzcGFuJyxcbiAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgIGNvdW50cnkuY2FwaXRhbFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgJ0FsdGVybmF0aXZlIFNwZWxsaW5nczogJyxcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeS5hbHRTcGVsbGluZ3NcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICBjb3VudHJ5LnJlZ2lvblxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgfSk7XG5cbiAgICAvKlxyXG4gICAgICogTWFwXHJcbiAgICAgKi9cbiAgICBMLm1hcGJveC5hY2Nlc3NUb2tlbiA9ICdway5leUoxSWpvaVlXOXphV3RoSWl3aVlTSTZJalF6UkdJeGVFa2lmUS43T3ZteUJiWHd3dDlReGpsaDlRZDN3JztcblxuICAgIHZhciBNYXAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgICBkaXNwbGF5TmFtZTogJ01hcCcsXG5cbiAgICAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxheWVyczogJydcbiAgICAgICAgfTtcbiAgICAgIH0sXG5cbiAgICAgIGNyZWF0ZU1hcDogZnVuY3Rpb24gY3JlYXRlTWFwKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIG1hcCA9IEwubWFwYm94Lm1hcChlbGVtZW50LCAnbWFwYm94LnN0cmVldHMnLCB7IHpvb21Db250cm9sOiBmYWxzZSB9KTtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgIH0sXG5cbiAgICAgIHNldHVwTWFwOiBmdW5jdGlvbiBzZXR1cE1hcCgpIHtcbiAgICAgICAgdGhpcy5tYXAuc2V0VmlldyhbdGhpcy5wcm9wcy5sYXQsIHRoaXMucHJvcHMubG9uXSwgdGhpcy5wcm9wcy56b29tKTtcbiAgICAgIH0sXG5cbiAgICAgIGNyZWF0ZUxheWVyczogZnVuY3Rpb24gY3JlYXRlTGF5ZXJzKCkge1xuXG4gICAgICAgIHZhciBteUxheWVyID0gTC5tYXBib3guZmVhdHVyZUxheWVyKCkuYWRkVG8odGhpcy5tYXApO1xuICAgICAgICBuZXcgTC5Db250cm9sLlpvb20oeyBwb3NpdGlvbjogJ3RvcHJpZ2h0JyB9KS5hZGRUbyh0aGlzLm1hcCk7XG5cbiAgICAgICAgJC5nZXRKU09OKCdhc3NldHMvZGF0YS9jb3VudHJpZXMuZ2VvLmpzb24nLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIG15TGF5ZXIuc2V0R2VvSlNPTihkYXRhKTtcblxuICAgICAgICAgIG15TGF5ZXIuZWFjaExheWVyKGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICAgICAgbGF5ZXIub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgICB2YXIgaWQgPSAkKHRoaXMpWzBdLmZlYXR1cmUucHJvcGVydGllcy5uYW1lLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvIC9nLCAnJykuc2xpY2UoMCwgMTIpO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygkKCdbaXRlbWlkKj0nICsgaWQgKyAnXScpKTtcblxuICAgICAgICAgICAgICAkKCcuaW5zdHJ1Y3Rpb25zJykuZmFkZU91dCgpO1xuXG4gICAgICAgICAgICAgICQoJy5wYW5lbHNfX2l0ZW0nKS5yZW1vdmVDbGFzcygncGFuZWxzX19pdGVtLS1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgJCgnW2l0ZW1pZCo9JyArIGlkICsgJ10nKS5hZGRDbGFzcygncGFuZWxzX19pdGVtLS1hY3RpdmUnKTtcblxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygkKHRoaXMpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KS5kb25lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkKCcucHJlbG9hZGVyJykuZmFkZU91dCgxMDAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmNyZWF0ZU1hcCkge1xuICAgICAgICAgIHRoaXMubWFwID0gdGhpcy5wcm9wcy5jcmVhdGVNYXAodGhpcy5nZXRET01Ob2RlKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubWFwID0gdGhpcy5jcmVhdGVNYXAodGhpcy5nZXRET01Ob2RlKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXR1cE1hcCgpO1xuICAgICAgICB0aGlzLmNyZWF0ZUxheWVycygpO1xuICAgICAgfSxcblxuICAgICAgb25NYXBDbGljazogZnVuY3Rpb24gb25NYXBDbGljaygpIHt9LFxuXG4gICAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiAnbWFwJyB9KTtcbiAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgdmFyIENvbnRhaW5lciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICAgIGRpc3BsYXlOYW1lOiAnQ29udGFpbmVyJyxcblxuICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY29udGFpbmVyJyB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWFwLCB7IGxhdDogJzAnLCBsb246ICcwJywgem9vbTogJzInIH0pLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFuZWxzLCBudWxsKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgUmVhY3QucmVuZGVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGFpbmVyLCBudWxsKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdW50JykpO1xuICB9O1xufSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa002TDNkaGJYQXZkM2QzTDJ4aFlpOWpiM1Z1ZEhKNVgybHVabTh2YzNKakwyRnpjMlYwY3k5cWN5OXlaV0ZqZEM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCTEVOQlFVTXNXVUZCVnpzN1FVRkZXaXhSUVVGTkxFTkJRVU1zVDBGQlR5eEhRVUZITEZsQlFWYzdPenM3TzBGQlN6VkNMRkZCUVVrc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF5eFhRVUZYTEVOQlFVTTdPenRCUVVVM1FpeHhRa0ZCWlN4RlFVRkZMREpDUVVGWE8wRkJRekZDTEdWQlFVODdRVUZEVEN4dFFrRkJVeXhGUVVGRkxFVkJRVVU3VTBGRFpDeERRVUZCTzA5QlEwWTdPMEZCUjBRc2RVSkJRV2xDTEVWQlFVVXNOa0pCUVZjN1FVRkROVUlzVTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXp0QlFVTk1MR0ZCUVVjc1JVRkJSU3cwUTBGQk5FTTdRVUZEYWtRc1kwRkJTU3hGUVVGRkxFdEJRVXM3UVVGRFdDeGpRVUZKTEVWQlFVVXNSVUZCUlR0QlFVTlNMR3RDUVVGUkxFVkJRVVVzVFVGQlRUdEJRVU5vUWl4cFFrRkJUeXhGUVVGRkxFTkJRVUVzVlVGQlV5eFRRVUZUTEVWQlFVVTdPMEZCUlROQ0xHZENRVUZKTEZOQlFWTXNSMEZCUnl4VFFVRlRMRU5CUVVNN08wRkJSVEZDTEdkQ1FVRkpMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzUlVGQlJUdEJRVU53UWl4clFrRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF6dEJRVU5hTEhsQ1FVRlRMRVZCUVVVc1UwRkJVenRsUVVOeVFpeERRVUZETEVOQlFVRTdZVUZEU0R0WFFVVkdMRU5CUVVFc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzBGQlExb3NaVUZCU3l4RlFVRkZMRU5CUVVFc1ZVRkJVeXhIUVVGSExFVkJRVVU3UVVGRGJrSXNiVUpCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdWMEZEYkVJc1EwRkJRU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTTdRVUZEV2l4dlFrRkJWU3hGUVVGRkxHOUNRVUZUTEVkQlFVY3NSVUZCUlR0QlFVTjRRaXhsUVVGSExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2VVSkJRWGxDTEVWQlFVVXNiMFJCUVc5RUxFTkJRVU1zUTBGQlF6dFhRVU4yUnpzN1UwRkZSaXhEUVVGRExFTkJRVUU3VDBGRFNEczdRVUZIUkN4WlFVRk5MRVZCUVVVc2EwSkJRVmM3UVVGRGFrSXNaVUZEUlRzN1dVRkJTeXhUUVVGVExFVkJRVU1zVVVGQlVUdFZRVU55UWpzN1kwRkJTU3hUUVVGVExFVkJRVU1zYlVKQlFXMUNPMWxCUlM5Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVExFOUJRVThzUlVGQlJUczdRVUZGZWtNc2NVSkJRMFU3TzJ0Q1FVRkpMRk5CUVZNc1JVRkJReXhqUVVGakxFVkJRVU1zVFVGQlRTeEZRVUZGTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NSVUZCUlN4RlFVRkZMRU5CUVVNc1FVRkJRenRuUWtGRGFFWTdPenRyUWtGQlN5eFBRVUZQTEVOQlFVTXNTVUZCU1R0cFFrRkJUVHRuUWtGRGRrSTdPenRyUWtGRFJUczdPenR2UWtGQldUczdPM05DUVVGUExFOUJRVThzUTBGQlF5eFBRVUZQTzNGQ1FVRlJPMjFDUVVGTE8ydENRVU12UXpzN096dHZRa0ZCTkVJc1QwRkJUeXhEUVVGRExGbEJRVms3YlVKQlFVMDdhMEpCUTNSRU96czdiMEpCUVVzc1QwRkJUeXhEUVVGRExFMUJRVTA3YlVKQlFVMDdhVUpCUTNSQ08yVkJRMFlzUTBGRFRqdGhRVU5HTEVOQlFVTTdWMEZGUXp0VFFVTkVMRU5CUTFBN1QwRkRSanM3UzBGRlJpeERRVUZETEVOQlFVTTdPenM3TzBGQlVVZ3NTMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhYUVVGWExFZEJRVWNzYTBWQlFXdEZMRU5CUVVNN08wRkJSVEZHTEZGQlFVa3NSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU03T3p0QlFVY3hRaXh4UWtGQlpTeEZRVUZGTERKQ1FVRlhPMEZCUXpGQ0xHVkJRVTg3UVVGRFRDeG5Ra0ZCVFN4RlFVRkZMRVZCUVVVN1UwRkRXQ3hEUVVGQk8wOUJRMFk3TzBGQlIwUXNaVUZCVXl4RlFVRkZMRzFDUVVGVExFOUJRVThzUlVGQlJUdEJRVU16UWl4WlFVRkpMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4UFFVRlBMRVZCUVVVc1owSkJRV2RDTEVWQlFVVXNSVUZCUlN4WFFVRlhMRVZCUVVVc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF6dEJRVU14UlN4bFFVRlBMRWRCUVVjc1EwRkJRenRQUVVOYU96dEJRVWRFTEdOQlFWRXNSVUZCUlN4dlFrRkJWenRCUVVOdVFpeFpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFBRVU55UlRzN1FVRkhSQ3hyUWtGQldTeEZRVUZGTEhkQ1FVRlhPenRCUVVWMlFpeFpRVUZKTEU5QlFVOHNSMEZCUnl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExGbEJRVmtzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGRFUXNXVUZCU1N4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZETEZGQlFWRXNSVUZCUlN4VlFVRlZMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN08wRkJSVFZFTEZOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1owTkJRV2RETEVWQlFVVXNWVUZCVXl4SlFVRkpMRVZCUVVVN1FVRkRla1FzYVVKQlFVOHNRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03TzBGQlJYcENMR2xDUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEZWQlFWTXNTMEZCU3l4RlFVRkZPMEZCUTJoRExHbENRVUZMTEVOQlFVTXNSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hWUVVGVExFTkJRVU1zUlVGQlJUczdRVUZGTlVJc2EwSkJRVWtzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRla1lzY1VKQlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVVc1EwRkJReXhEUVVGRExGZEJRVmNzUjBGQlF5eEZRVUZGTEVkQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVVc1EwRkJRenM3UVVGRmNrTXNaVUZCUXl4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZET3p0QlFVVTNRaXhsUVVGRExFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTXNWMEZCVnl4RFFVRkRMSE5DUVVGelFpeERRVUZETEVOQlFVTTdRVUZEZGtRc1pVRkJReXhEUVVGRExGZEJRVmNzUjBGQlF5eEZRVUZGTEVkQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMRU5CUVVNN08wRkJSWFpFTEhGQ1FVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPMkZCUjNSQ0xFTkJRVU1zUTBGQlFUdFhRVU5JTEVOQlFVTXNRMEZCUVR0VFFVVklMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQlZ6dEJRVU5xUWl4WFFVRkRMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMU5CUXk5Q0xFTkJRVU1zUTBGQlF6dFBRVXRLT3p0QlFVVkVMSFZDUVVGcFFpeEZRVUZGTERaQ1FVRlhPMEZCUXpWQ0xGbEJRVWtzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRVZCUVVVN1FVRkRkRUlzWTBGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNc1EwRkJRenRUUVVOMFJDeE5RVUZOTzBGQlEwZ3NZMEZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJReXhEUVVGRE8xTkJRMmhFT3p0QlFVVkVMRmxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dEJRVU5vUWl4WlFVRkpMRU5CUVVNc1dVRkJXU3hGUVVGRkxFTkJRVU03VDBGRmNrSTdPMEZCUlVRc1owSkJRVlVzUlVGQlJTeHpRa0ZCVnl4RlFVVjBRanM3UVVGRlJDeFpRVUZOTEVWQlFVVXNhMEpCUVZjN1FVRkRha0lzWlVGRFJTdzJRa0ZCU3l4VFFVRlRMRVZCUVVNc1MwRkJTeXhIUVVGUExFTkJRelZDTzA5QlEwWTdPMHRCUlVZc1EwRkJReXhEUVVGRE96dEJRVWxJTEZGQlFVa3NVMEZCVXl4SFFVRkhMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU03T3p0QlFVTm9ReXhaUVVGTkxFVkJRVVVzYTBKQlFWYzdRVUZEYWtJc1pVRkRSVHM3V1VGQlN5eFRRVUZUTEVWQlFVTXNWMEZCVnp0VlFVTjRRaXh2UWtGQlF5eEhRVUZITEVsQlFVTXNSMEZCUnl4RlFVRkRMRWRCUVVjc1JVRkJReXhIUVVGSExFVkJRVU1zUjBGQlJ5eEZRVUZETEVsQlFVa3NSVUZCUXl4SFFVRkhMRWRCUVVVN1ZVRkRMMElzYjBKQlFVTXNUVUZCVFN4UFFVRkhPMU5CUTA0c1EwRkRVRHRQUVVOR08wdEJRMFlzUTBGQlF5eERRVUZET3p0QlFVZElMRk5CUVVzc1EwRkJReXhOUVVGTkxFTkJRMVlzYjBKQlFVTXNVMEZCVXl4UFFVRkhMRVZCUTJJc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZEYWtNc1EwRkJRVHRIUVVsQkxFTkJRVUU3UTBGRlFTeERRVUZCTEVWQlFVY3NRMEZCUVNJc0ltWnBiR1VpT2lKRE9pOTNZVzF3TDNkM2R5OXNZV0l2WTI5MWJuUnllVjlwYm1adkwzTnlZeTloYzNObGRITXZhbk12Y21WaFkzUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0b0tTQjdYSEpjYmx4eVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtDa2dlMXh5WEc1Y2NseHVMeXBjY2x4dUlDb2dVR0Z1Wld4elhISmNiaUFxTDF4eVhHNTJZWElnVUdGdVpXeHpJRDBnVW1WaFkzUXVZM0psWVhSbFEyeGhjM01vZTF4eVhHNWNjbHh1SUNCblpYUkpibWwwYVdGc1UzUmhkR1U2SUdaMWJtTjBhVzl1S0NrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUh0Y2NseHVJQ0FnSUNBZ1kyOTFiblJ5YVdWek9pQmJYU3hjY2x4dUlDQWdJSDFjY2x4dUlDQjlMRnh5WEc1Y2NseHVYSEpjYmlBZ1kyOXRjRzl1Wlc1MFJHbGtUVzkxYm5RNklHWjFibU4wYVc5dUtDa2dlMXh5WEc0Z0lDQWdKQzVoYW1GNEtIdGNjbHh1SUNBZ0lDQWdkWEpzT2lBbmFIUjBjSE02THk5eVpYTjBZMjkxYm5SeWFXVnpMWFl4TG5BdWJXRnphR0Z3WlM1amIyMHZZV3hzSnl4Y2NseHVJQ0FnSUNBZ2RIbHdaVG9nSjBkRlZDY3NYSEpjYmlBZ0lDQWdJR1JoZEdFNklIdDlMRnh5WEc0Z0lDQWdJQ0JrWVhSaGRIbHdaVG9nSjJwemIyNG5MRnh5WEc0Z0lDQWdJQ0J6ZFdOalpYTnpPaUJtZFc1amRHbHZiaWhqYjNWdWRISnBaWE1wSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHTnZkVzUwY21sbGN5QTlJR052ZFc1MGNtbGxjenRjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhWE5OYjNWdWRHVmtLQ2twSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIzVnVkSEpwWlhNNklHTnZkVzUwY21sbGMxeHlYRzRnSUNBZ0lDQWdJQ0FnZlNsY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNCOUxtSnBibVFvZEdocGN5a3NJQzh2SUdWdVpDQnpkV05qWlhOelhISmNiaUFnSUNBZ0lHVnljbTl5T2lCbWRXNWpkR2x2YmlobGNuSXBJSHRjY2x4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5aGxjbklwTzF4eVhHNGdJQ0FnSUNCOUxtSnBibVFvZEdocGN5a3NJQzh2SUdWdVpDQmxjbkp2Y2x4eVhHNGdJQ0FnSUNCaVpXWnZjbVZUWlc1a09pQm1kVzVqZEdsdmJpaDRhSElwSUh0Y2NseHVJQ0FnSUNBZ0lDQjRhSEl1YzJWMFVtVnhkV1Z6ZEVobFlXUmxjaWhjSWxndFRXRnphR0Z3WlMxQmRYUm9iM0pwZW1GMGFXOXVYQ0lzSUZ3aVNqRXdZVUpOUVRSalFXMXphRzlEYWtkdmFIbzJVVmcwTWxWTmJIQXhaSFV5V0RscWMyNWFVbFZSWVRCUlRFbERibU5jSWlrN1hISmNiaUFnSUNBZ0lIMGdMeThnWlc1a0lHSmxabTl5WlZObGJtUmNjbHh1WEhKY2JpQWdJQ0I5S1NBdkx5QmxibVFnWVdwaGVGeHlYRzRnSUgwc1hISmNibHh5WEc1Y2NseHVJQ0J5Wlc1a1pYSTZJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJQ2hjY2x4dUlDQWdJQ0FnUEdScGRpQmpiR0Z6YzA1aGJXVTlYQ0p3WVc1bGJITmNJajVjY2x4dUlDQWdJQ0FnSUNBOGRXd2dZMnhoYzNOT1lXMWxQVndpY0dGdVpXeHpYMTlqYjI1MFlXbHVaWEpjSWo1Y2NseHVJQ0FnSUNBZ0lDQjdYSEpjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4wWVhSbExtTnZkVzUwY21sbGN5NXRZWEFvWm5WdVkzUnBiMjRvWTI5MWJuUnllU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCamIyNXpiMnhsTG14dlp5aGpiM1Z1ZEhKNUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGJHa2dZMnhoYzNOT1lXMWxQVndpY0dGdVpXeHpYMTlwZEdWdFhDSWdhWFJsYlVsRVBYdGpiM1Z1ZEhKNUxtNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tTNXlaWEJzWVdObEtDOGdMMmNzSUNjbktYMCtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YURJK2UyTnZkVzUwY25rdWJtRnRaWDA4TDJneVBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSFZzUGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThiR2srUTJGd2FYUmhiQ0E4YzNCaGJqNTdZMjkxYm5SeWVTNWpZWEJwZEdGc2ZUd3ZjM0JoYmo0OEwyeHBQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGJHaytRV3gwWlhKdVlYUnBkbVVnVTNCbGJHeHBibWR6T2lCN1kyOTFiblJ5ZVM1aGJIUlRjR1ZzYkdsdVozTjlQQzlzYVQ1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR3hwUG50amIzVnVkSEo1TG5KbFoybHZibjA4TDJ4cFBseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzkxYkQ1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwyeHBQbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBYSEpjYmlBZ0lDQWdJQ0FnSUNCOUtWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBOEwzVnNQbHh5WEc0Z0lDQWdJQ0E4TDJScGRqNWNjbHh1SUNBZ0lDbGNjbHh1SUNCOVhISmNibHh5WEc1OUtUdGNjbHh1WEhKY2JseHlYRzVjY2x4dVhISmNiaThxWEhKY2JpQXFJRTFoY0Z4eVhHNGdLaTljY2x4dVRDNXRZWEJpYjNndVlXTmpaWE56Vkc5clpXNGdQU0FuY0dzdVpYbEtNVWxxYjJsWlZ6bDZZVmQwYUVscGQybFpVMGsyU1dwUmVsSkhTWGhsUld0cFpsRXVOMDkyYlhsQ1lsaDNkM1E1VVhocWJHZzVVV1F6ZHljN1hISmNibHh5WEc1MllYSWdUV0Z3SUQwZ1VtVmhZM1F1WTNKbFlYUmxRMnhoYzNNb2UxeHlYRzVjY2x4dVhISmNiaUFnWjJWMFNXNXBkR2xoYkZOMFlYUmxPaUJtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUI3WEhKY2JpQWdJQ0FnSUd4aGVXVnljem9nSnljc1hISmNiaUFnSUNCOVhISmNiaUFnZlN4Y2NseHVYSEpjYmx4eVhHNGdJR055WldGMFpVMWhjRG9nWm5WdVkzUnBiMjRvWld4bGJXVnVkQ2tnZTF4eVhHNGdJQ0FnZG1GeUlHMWhjQ0E5SUV3dWJXRndZbTk0TG0xaGNDaGxiR1Z0Wlc1MExDQW5iV0Z3WW05NExuTjBjbVZsZEhNbkxDQjdJSHB2YjIxRGIyNTBjbTlzT2lCbVlXeHpaU0I5S1R0Y2NseHVJQ0FnSUhKbGRIVnliaUJ0WVhBN1hISmNiaUFnZlN4Y2NseHVYSEpjYmx4eVhHNGdJSE5sZEhWd1RXRndPaUJtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUhSb2FYTXViV0Z3TG5ObGRGWnBaWGNvVzNSb2FYTXVjSEp2Y0hNdWJHRjBMQ0IwYUdsekxuQnliM0J6TG14dmJsMHNJSFJvYVhNdWNISnZjSE11ZW05dmJTazdYSEpjYmlBZ2ZTeGNjbHh1WEhKY2JseHlYRzRnSUdOeVpXRjBaVXhoZVdWeWN6b2dablZ1WTNScGIyNG9LU0I3WEhKY2JseHlYRzRnSUNBZ2RtRnlJRzE1VEdGNVpYSWdQU0JNTG0xaGNHSnZlQzVtWldGMGRYSmxUR0Y1WlhJb0tTNWhaR1JVYnloMGFHbHpMbTFoY0NrN1hISmNiaUFnSUNCdVpYY2dUQzVEYjI1MGNtOXNMbHB2YjIwb2UzQnZjMmwwYVc5dU9pQW5kRzl3Y21sbmFIUW5JSDBwTG1Ga1pGUnZLSFJvYVhNdWJXRndLVHRjY2x4dVhISmNiaUFnSUNBa0xtZGxkRXBUVDA0b0oyRnpjMlYwY3k5a1lYUmhMMk52ZFc1MGNtbGxjeTVuWlc4dWFuTnZiaWNzSUdaMWJtTjBhVzl1S0dSaGRHRXBJSHRjY2x4dUlDQWdJQ0FnYlhsTVlYbGxjaTV6WlhSSFpXOUtVMDlPS0dSaGRHRXBPMXh5WEc1Y2NseHVJQ0FnSUNBZ2JYbE1ZWGxsY2k1bFlXTm9UR0Y1WlhJb1puVnVZM1JwYjI0b2JHRjVaWElwSUh0Y2NseHVJQ0FnSUNBZ0lDQnNZWGxsY2k1dmJpZ25ZMnhwWTJzbkxDQm1kVzVqZEdsdmJpaGxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdJQ0FnSUhaaGNpQnBaQ0E5SUNRb2RHaHBjeWxiTUYwdVptVmhkSFZ5WlM1d2NtOXdaWEowYVdWekxtNWhiV1V1ZEc5TWIzZGxja05oYzJVb0tTNXlaWEJzWVdObEtDOGdMMmNzSUNjbktTNXpiR2xqWlNnd0xDQXhNaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWdnSkNnblcybDBaVzFwWkNvOUp5dHBaQ3NuWFNjcElDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdKQ2duTG1sdWMzUnlkV04wYVc5dWN5Y3BMbVpoWkdWUGRYUW9LVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FrS0NjdWNHRnVaV3h6WDE5cGRHVnRKeWt1Y21WdGIzWmxRMnhoYzNNb0ozQmhibVZzYzE5ZmFYUmxiUzB0WVdOMGFYWmxKeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWtLQ2RiYVhSbGJXbGtLajBuSzJsa0t5ZGRKeWt1WVdSa1EyeGhjM01vSjNCaGJtVnNjMTlmYVhSbGJTMHRZV04wYVhabEp5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSkNoMGFHbHpLU2s3WEhKY2JseHlYRzVjY2x4dUlDQWdJQ0FnSUNCOUtWeHlYRzRnSUNBZ0lDQjlLVnh5WEc1Y2NseHVJQ0FnSUgwcExtUnZibVVvWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnSUNBZ0lDUW9KeTV3Y21Wc2IyRmtaWEluS1M1bVlXUmxUM1YwS0RFd01EQXBPMXh5WEc0Z0lDQWdmU2s3WEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc0Z0lIMHNYSEpjYmx4eVhHNGdJR052YlhCdmJtVnVkRVJwWkUxdmRXNTBPaUJtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TG5CeWIzQnpMbU55WldGMFpVMWhjQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YldGd0lEMGdkR2hwY3k1d2NtOXdjeTVqY21WaGRHVk5ZWEFvZEdocGN5NW5aWFJFVDAxT2IyUmxLQ2twTzF4eVhHNGdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbTFoY0NBOUlIUm9hWE11WTNKbFlYUmxUV0Z3S0hSb2FYTXVaMlYwUkU5TlRtOWtaU2dwS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjBhR2x6TG5ObGRIVndUV0Z3S0NrN1hISmNiaUFnSUNCMGFHbHpMbU55WldGMFpVeGhlV1Z5Y3lncE8xeHlYRzVjY2x4dUlDQjlMRnh5WEc1Y2NseHVJQ0J2YmsxaGNFTnNhV05yT2lCbWRXNWpkR2x2YmlncElIdGNjbHh1WEhKY2JpQWdmU3hjY2x4dVhISmNiaUFnY21WdVpHVnlPaUJtZFc1amRHbHZiaWdwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUFvWEhKY2JpQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQU2R0WVhBblBqd3ZaR2wyUGx4eVhHNGdJQ0FnS1Z4eVhHNGdJSDFjY2x4dVhISmNibjBwTzF4eVhHNWNjbHh1WEhKY2JseHlYRzUyWVhJZ1EyOXVkR0ZwYm1WeUlEMGdVbVZoWTNRdVkzSmxZWFJsUTJ4aGMzTW9lMXh5WEc0Z0lISmxibVJsY2pvZ1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z0tGeHlYRzRnSUNBZ0lDQThaR2wySUdOc1lYTnpUbUZ0WlQxY0ltTnZiblJoYVc1bGNsd2lQbHh5WEc0Z0lDQWdJQ0FnSUR4TllYQWdiR0YwUFZ3aU1Gd2lJR3h2YmoxY0lqQmNJaUI2YjI5dFBWd2lNbHdpTHo1Y2NseHVJQ0FnSUNBZ0lDQThVR0Z1Wld4eklDOCtYSEpjYmlBZ0lDQWdJRHd2WkdsMlBseHlYRzRnSUNBZ0tWeHlYRzRnSUgxY2NseHVmU2s3WEhKY2JseHlYRzVjY2x4dVVtVmhZM1F1Y21WdVpHVnlLRnh5WEc0Z0lEeERiMjUwWVdsdVpYSWdMejRzWEhKY2JpQWdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0oyMXZkVzUwSnlsY2NseHVLVnh5WEc1Y2NseHVYSEpjYmx4eVhHNTlYSEpjYmx4eVhHNTlLU2dwWEhKY2JseHlYRzVjY2x4dVhISmNibHh5WEc1Y2NseHVJbDE5Il19
