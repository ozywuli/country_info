(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var app = require('./react.js');

app();


},{"./react.js":2}],2:[function(require,module,exports){
'use strict';

(function () {

  module.exports = function () {

    /*
     * Panels
     */
    var Panels = React.createClass({
      displayName: 'Panels',

      getInitialState: function getInitialState() {
        return {
          countries: []
        };
      },

      componentDidMount: function componentDidMount() {
        $.ajax({
          url: 'https://restcountries-v1.p.mashape.com/all',
          type: 'GET',
          data: {},
          datatype: 'json',
          success: (function (countries) {

            var countries = countries;

            if (this.isMounted()) {
              this.setState({
                countries: countries
              });
            }
          }).bind(this), // end success
          error: (function (err) {
            console.log(err);
          }).bind(this), // end error
          beforeSend: function beforeSend(xhr) {
            xhr.setRequestHeader("X-Mashape-Authorization", "J10aBMA4cAmshoCjGohz6QX42UMlp1du2X9jsnZRUQa0QLICnc");
          } // end beforeSend

        }); // end ajax
      },

      render: function render() {
        return React.createElement(
          'div',
          { className: 'panels' },
          React.createElement(
            'ul',
            { className: 'panels__container' },
            this.state.countries.map(function (country) {
              // console.log(country);
              return React.createElement(
                'li',
                { className: 'panels__item', itemID: country.name.toLowerCase().replace(/ /g, '') },
                React.createElement(
                  'h2',
                  null,
                  country.name
                ),
                React.createElement(
                  'ul',
                  null,
                  React.createElement(
                    'li',
                    null,
                    'Capital ',
                    React.createElement(
                      'span',
                      null,
                      country.capital
                    )
                  ),
                  React.createElement(
                    'li',
                    null,
                    'Alternative Spellings: ',
                    country.altSpellings
                  ),
                  React.createElement(
                    'li',
                    null,
                    country.region
                  )
                )
              );
            })
          )
        );
      }

    });

    /*
     * Map
     */
    L.mapbox.accessToken = 'pk.eyJ1IjoiYW9zaWthIiwiYSI6IjQzRGIxeEkifQ.7OvmyBbXwwt9Qxjlh9Qd3w';

    var Map = React.createClass({
      displayName: 'Map',

      getInitialState: function getInitialState() {
        return {
          layers: ''
        };
      },

      createMap: function createMap(element) {
        var map = L.mapbox.map(element, 'mapbox.streets', { zoomControl: false });
        return map;
      },

      setupMap: function setupMap() {
        this.map.setView([this.props.lat, this.props.lon], this.props.zoom);
      },

      createLayers: function createLayers() {

        var myLayer = L.mapbox.featureLayer().addTo(this.map);
        new L.Control.Zoom({ position: 'topright' }).addTo(this.map);

        $.getJSON('assets/data/countries.geo.json', function (data) {
          myLayer.setGeoJSON(data);

          myLayer.eachLayer(function (layer) {
            layer.on('click', function (e) {

              var id = $(this)[0].feature.properties.name.toLowerCase().replace(/ /g, '').slice(0, 12);
              console.log($('[itemid*=' + id + ']'));

              $('.panels__item').removeClass('panels__item--active');
              $('[itemid*=' + id + ']').addClass('panels__item--active');
            });
          });
        }).done(function () {
          $('.preloader').fadeOut(1000);
        });
      },

      componentDidMount: function componentDidMount() {
        if (this.props.createMap) {
          this.map = this.props.createMap(this.getDOMNode());
        } else {
          this.map = this.createMap(this.getDOMNode());
        }

        this.setupMap();
        this.createLayers();
      },

      onMapClick: function onMapClick() {},

      render: function render() {
        return React.createElement('div', { className: 'map' });
      }

    });

    var Container = React.createClass({
      displayName: 'Container',

      render: function render() {
        return React.createElement(
          'div',
          { className: 'container' },
          React.createElement(Map, { lat: '0', lon: '0', zoom: '2' }),
          React.createElement(Panels, null)
        );
      }
    });

    React.render(React.createElement(Container, null), document.getElementById('mount'));
  };
})();


},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
